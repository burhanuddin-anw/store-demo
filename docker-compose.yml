services:
  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    restart: always
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Prometheus metrics
      - "8889:8889"   # Prometheus exporter metrics
    networks:
      - backend_services

  # Jaeger
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    restart: always
    ports:
      - "16686:16686"
      - "14250:14250"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - backend_services

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - backend_services
    depends_on:
      otel-collector:
        condition: service_started

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: always
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-storage:/var/lib/grafana
    networks:
      - backend_services
    depends_on:
      prometheus:
        condition: service_started

  loki:
    image: grafana/loki:2.9.4
    container_name: loki
    restart: always
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - backend_services
    volumes:
      - ./loki-config.yaml:/etc/loki/local-config.yaml

  promtail:
    image: grafana/promtail:2.9.4
    container_name: promtail
    restart: always
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./promtail-config.yml:/etc/promtail/promtail-config.yml
    command: -config.file=/etc/promtail/promtail-config.yml
    networks:
      - backend_services
    depends_on:
      - loki

  mongodb:
    image: mongo:6.0.6
    container_name: mongo
    restart: always
    ports:
      - 27017:27017
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - backend_services
  rabbitmq:
    image: rabbitmq:3.13.2-management-alpine
    container_name: rabbitmq
    restart: always
    environment:
      - "RABBITMQ_DEFAULT_USER=username"
      - "RABBITMQ_DEFAULT_PASS=password"
    ports:
      - 15672:15672
      - 5672:5672
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - ./rabbitmq_enabled_plugins:/etc/rabbitmq/enabled_plugins
    networks:
      - backend_services
  order-service:
    build: src/order-service
    container_name: order-service
    restart: always
    ports:
      - 3000:3000
    healthcheck:
      test: ["CMD", "wget", "-O", "/dev/null", "-q", "http://order-service:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      - ORDER_QUEUE_HOSTNAME=rabbitmq
      - ORDER_QUEUE_PORT=5672
      - ORDER_QUEUE_USERNAME=username
      - ORDER_QUEUE_PASSWORD=password
      - ORDER_QUEUE_NAME=orders
      - ORDER_QUEUE_RECONNECT_LIMIT=3
      # OpenTelemetry configuration - Fixed to use HTTP endpoint for Node.js
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318/v1/traces
      - OTEL_SERVICE_NAME=order-service
      - OTEL_RESOURCE_ATTRIBUTES=service.version=1.0.0,deployment.environment=docker-compose
    networks:
      - backend_services
    depends_on:
      rabbitmq:
        condition: service_healthy
      otel-collector:
        condition: service_started
  makeline-service:
    build: src/makeline-service
    container_name: makeline-service
    restart: always
    ports:
      - 3001:3001
    healthcheck:
      test: ["CMD", "wget", "-O", "/dev/null", "-q", "http://makeline-service:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      - ORDER_QUEUE_URI=amqp://rabbitmq:5672
      - ORDER_QUEUE_USERNAME=username
      - ORDER_QUEUE_PASSWORD=password
      - ORDER_QUEUE_NAME=orders
      - ORDER_DB_URI=mongodb://mongodb:27017
      - ORDER_DB_NAME=orderdb
      - ORDER_DB_COLLECTION_NAME=orders
      # OpenTelemetry configuration
      - OTEL_EXPORTER_OTLP_ENDPOINT=otel-collector:4317
      - OTEL_SERVICE_NAME=makeline-service
      - OTEL_RESOURCE_ATTRIBUTES=service.version=1.0.0,deployment.environment=docker-compose
      - APP_VERSION=1.0.0
      - ENVIRONMENT=docker-compose
    networks:
      - backend_services
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      otel-collector:
        condition: service_started
  product-service:
    build: src/product-service
    container_name: product-service
    restart: always
    ports:
      - 3002:3002
    healthcheck:
      test: ["CMD", "wget", "-O", "/dev/null", "-q", "http://product-service:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      - AI_SERVICE_URL=http://ai-service:5001/
      # OpenTelemetry configuration - Fixed to use gRPC endpoint for Rust
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=product-service
      - OTEL_RESOURCE_ATTRIBUTES=service.version=1.0.0,deployment.environment=docker-compose
      - APP_VERSION=1.0.0
      - ENVIRONMENT=docker-compose
    networks:
      - backend_services
    depends_on:
      otel-collector:
        condition: service_started
  store-front:
    build: src/store-front
    container_name: store-front
    restart: always
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "wget", "-O", "/dev/null", "-q", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      # OpenTelemetry configuration for browser (uses HTTP endpoint)
      - VITE_OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4318/v1/traces
      - VITE_APP_VERSION=1.0.0
      - VITE_ENVIRONMENT=docker-compose
    networks:
      - backend_services
    depends_on:
      - product-service
      - order-service
      - otel-collector
  store-admin:
    build: src/store-admin
    container_name: store-admin
    restart: always
    ports:
      - 8081:8081
    healthcheck:
      test: ["CMD", "wget", "-O", "/dev/null", "-q", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      # OpenTelemetry configuration for browser (uses HTTP endpoint)
      - VITE_OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318/v1/traces
      - VITE_APP_VERSION=1.0.0
      - VITE_ENVIRONMENT=docker-compose
    networks:
      - backend_services
    depends_on:
      - product-service
      - makeline-service
      - otel-collector
  virtual-customer:
    build: src/virtual-customer
    container_name: virtual-customer
    restart: always
    environment:
      - ORDER_SERVICE_URL=http://order-service:3000/
      - ORDERS_PER_HOUR=30
      # OpenTelemetry configuration - Fixed to use HTTP endpoint for Rust virtual services
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_SERVICE_NAME=virtual-customer
      - OTEL_RESOURCE_ATTRIBUTES=service.version=1.0.0,deployment.environment=docker-compose
      - APP_VERSION=1.0.0
      - ENVIRONMENT=docker-compose
    networks:
      - backend_services
    depends_on:
      order-service:
        condition: service_healthy
      otel-collector:
        condition: service_started
  virtual-worker:
    build: src/virtual-worker
    container_name: virtual-worker
    restart: always
    environment:
      - MAKELINE_SERVICE_URL=http://makeline-service:3001
      - ORDERS_PER_HOUR=20
      # OpenTelemetry configuration - Fixed to use HTTP endpoint for Rust virtual services
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_SERVICE_NAME=virtual-worker
      - OTEL_RESOURCE_ATTRIBUTES=service.version=1.0.0,deployment.environment=docker-compose
      - APP_VERSION=1.0.0
      - ENVIRONMENT=docker-compose
    networks:
      - backend_services
    depends_on:
      makeline-service:
        condition: service_healthy
      otel-collector:
        condition: service_started
  ai-service:
    build: src/ai-service
    container_name: ai-service
    restart: always
    ports:
      - 5001:5001
    healthcheck:
      test: ["CMD", "wget", "-O", "/dev/null", "-q", "http://ai-service:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      - USE_AZURE_OPENAI=True # set to False if you are not using Azure OpenAI
      - AZURE_OPENAI_DEPLOYMENT_NAME= # required if using Azure OpenAI
      - AZURE_OPENAI_ENDPOINT= # required if using Azure OpenAI
      - OPENAI_API_KEY= # required if using OpenAI and not required if using Azure OpenAI with Azure AD
      - OPENAI_ORG_ID= # required if using OpenAI
      # OpenTelemetry configuration - Fixed to use gRPC endpoint for Python
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=ai-service
      - OTEL_RESOURCE_ATTRIBUTES=service.version=1.0.0,deployment.environment=docker-compose
      - APP_VERSION=1.0.0
      - ENVIRONMENT=docker-compose
    networks:
      - backend_services
    depends_on:
      otel-collector:
        condition: service_started

networks:
  backend_services:
    driver: bridge

volumes:
  grafana-storage:
